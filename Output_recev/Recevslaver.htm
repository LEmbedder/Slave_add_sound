<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output_recev\Recevslaver.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output_recev\Recevslaver.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Wed Jan 24 10:43:50 2018
<BR><P>
<H3>Maximum Stack Usage =       1520 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; slaver_main &rArr; initionNRF &rArr; hardware_main &rArr; slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[135]">stCheck</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[135]">stCheck</a><BR>
 <LI><a href="#[fb]">sentencePlay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[135]">stCheck</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from recev.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from mma7660fc.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from singlewireslave.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from nrf24l01.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">GEA_AddAnimation</a> from hdr.o(i.GEA_AddAnimation) referenced from genginecfg.o(.constdata)
 <LI><a href="#[4b]">GEA_ClePutRef</a> from slaverapis2.o(i.GEA_ClePutRef) referenced from genginecfg.o(.constdata)
 <LI><a href="#[4f]">GEA_ClearAnimationFifo</a> from hdr.o(i.GEA_ClearAnimationFifo) referenced from genginecfg.o(.constdata)
 <LI><a href="#[4a]">GEA_ClearLayer</a> from slaverapis2.o(i.GEA_ClearLayer) referenced from genginecfg.o(.constdata)
 <LI><a href="#[4e]">GEA_DeleteAnimation</a> from hdr.o(i.GEA_DeleteAnimation) referenced from genginecfg.o(.constdata)
 <LI><a href="#[5e]">GEA_GetGName</a> from config.o(i.GEA_GetGName) referenced from genginecfg.o(.constdata)
 <LI><a href="#[56]">GEA_GetJoyStickStatus</a> from slaverapis2.o(i.GEA_GetJoyStickStatus) referenced from genginecfg.o(.constdata)
 <LI><a href="#[57]">GEA_GetNearStatus</a> from recev.o(i.GEA_GetNearStatus) referenced from genginecfg.o(.constdata)
 <LI><a href="#[54]">GEA_GetSpeechStatus</a> from sentence.o(i.GEA_GetSpeechStatus) referenced from genginecfg.o(.constdata)
 <LI><a href="#[53]">GEA_LoopSpeech</a> from sentence.o(i.GEA_LoopSpeech) referenced from genginecfg.o(.constdata)
 <LI><a href="#[58]">GEA_MotorCtrl</a> from motor.o(i.GEA_MotorCtrl) referenced from genginecfg.o(.constdata)
 <LI><a href="#[4c]">GEA_PlayAnimation</a> from hdr.o(i.GEA_PlayAnimation) referenced from genginecfg.o(.constdata)
 <LI><a href="#[52]">GEA_PlaySpeech</a> from sentence.o(i.GEA_PlaySpeech) referenced from genginecfg.o(.constdata)
 <LI><a href="#[5b]">GEA_PowerOff</a> from xiaomu.o(i.GEA_PowerOff) referenced from genginecfg.o(.constdata)
 <LI><a href="#[49]">GEA_PutGraph</a> from slaverapis2.o(i.GEA_PutGraph) referenced from genginecfg.o(.constdata)
 <LI><a href="#[5d]">GEA_SetGName</a> from config.o(i.GEA_SetGName) referenced from genginecfg.o(.constdata)
 <LI><a href="#[5c]">GEA_SetMode</a> from slaverapis2.o(i.GEA_SetMode) referenced from genginecfg.o(.constdata)
 <LI><a href="#[51]">GEA_SetSpeechList</a> from sentence.o(i.GEA_SetSpeechList) referenced from genginecfg.o(.constdata)
 <LI><a href="#[5a]">GEA_SetTimCnt</a> from cmos.o(i.GEA_SetTimCnt) referenced from genginecfg.o(.constdata)
 <LI><a href="#[5f]">GEA_Setvolume</a> from config.o(i.GEA_Setvolume) referenced from genginecfg.o(.constdata)
 <LI><a href="#[59]">GEA_SlaverState</a> from slaverapis2.o(i.GEA_SlaverState) referenced from genginecfg.o(.constdata)
 <LI><a href="#[50]">GEA_StopAnimation</a> from hdr.o(i.GEA_StopAnimation) referenced from genginecfg.o(.constdata)
 <LI><a href="#[55]">GEA_StopSpeech</a> from sentence.o(i.GEA_StopSpeech) referenced from genginecfg.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from pcm.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SystemReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Initialization
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ad]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[67]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1af]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[74]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[71]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[79]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[7c]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetAD
</UL>

<P><STRONG><a name="[77]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[72]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[73]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[76]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[82]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsample
</UL>

<P><STRONG><a name="[78]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[ed]"></a>AddGraph</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, display.o(i.AddGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddGraph
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_IRQHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PutGraph
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_ClePutRef
</UL>

<P><STRONG><a name="[7b]"></a>Bat_GetAD</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, battery.o(i.Bat_GetAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bat_GetAD
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[7d]"></a>Bat_GetChargeState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, battery.o(i.Bat_GetChargeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bat_GetChargeState
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsCharging
</UL>

<P><STRONG><a name="[7f]"></a>Bat_GetStandbyState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, battery.o(i.Bat_GetStandbyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bat_GetStandbyState
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsCharging
</UL>

<P><STRONG><a name="[80]"></a>Bat_Init</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, battery.o(i.Bat_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bat_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[83]"></a>Bat_IsChargForSlave</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, battery.o(i.Bat_IsChargForSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bat_IsChargForSlave &rArr; Bat_IsCharging &rArr; Bat_GetStandbyState
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimerCount
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsCharging
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[86]"></a>Bat_IsCharging</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, battery.o(i.Bat_IsCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bat_IsCharging &rArr; Bat_GetStandbyState
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetStandbyState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetChargeState
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsChargForSlave
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
</UL>

<P><STRONG><a name="[84]"></a>CMOS_GetTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmos.o(i.CMOS_GetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetNearStatus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recevcheck
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAutoPowerOff
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsChargForSlave
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_GetShakeState
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>CMOS_GetTimerCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmos.o(i.CMOS_GetTimerCount))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsChargForSlave
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[87]"></a>CMOS_Initialization</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmos.o(i.CMOS_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CMOS_Initialization &rArr; CMOS_Timer2Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Timer2Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_InitReg
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[153]"></a>CMOS_TimerProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmos.o(i.CMOS_TimerProcess))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>CRC_CalcBlockCRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_crc.o(i.CRC_CalcBlockCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_CalcBlockCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_SPI
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_MCU
</UL>

<P><STRONG><a name="[a5]"></a>CRC_GetCRC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_GetCRC))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_SPI
</UL>

<P><STRONG><a name="[9f]"></a>CRC_MCU</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.CRC_MCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_MCU &rArr; CRC_CalcBlockCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>

<P><STRONG><a name="[a1]"></a>CRC_ResetDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_ResetDR))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_SPI
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_MCU
</UL>

<P><STRONG><a name="[a3]"></a>CRC_SPI</STRONG> (Thumb, 62 bytes, Stack size 272 bytes, hardware.o(i.CRC_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CRC_SPI &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>

<P><STRONG><a name="[a6]"></a>CheckAutoPowerOff</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, cmos.o(i.CheckAutoPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CheckAutoPowerOff
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[ec]"></a>ClearGraphLayer</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, display.o(i.ClearGraphLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearGraphLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_ClearLayer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_IRQHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdraction
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_ClePutRef
</UL>

<P><STRONG><a name="[a7]"></a>ClearScreen</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, display.o(i.ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClearScreen &rArr; FrushDspBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrushDspBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Initialization
</UL>

<P><STRONG><a name="[104]"></a>ClrAutoPowerOff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmos.o(i.ClrAutoPowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetTimCnt
</UL>

<P><STRONG><a name="[a9]"></a>Console_Open</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, display.o(i.Console_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = Console_Open &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrushDspBuffer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Initialization
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[19a]"></a>DBGMCU_Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dbgmcu.o(i.DBGMCU_Config))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, recev.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; getsample &rArr; DMA_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsample
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsample
</UL>

<P><STRONG><a name="[b1]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[ac]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[b2]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[b4]"></a>Display_CheckUpdate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, display.o(i.Display_CheckUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = Display_CheckUpdate &rArr; RefreshGraphs &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshGraphs
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[b6]"></a>Display_Initialization</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, display.o(i.Display_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_initOn
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, mma7660fc.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EXTI0_IRQHandler &rArr; Read_Reg_Queue &rArr; I2C_W &rArr; SDA_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg_Queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, singlewireslave.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI15_10_IRQHandler &rArr; set_mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, nrf24l01.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EXTI9_5_IRQHandler &rArr; nRF_IRQHandler &rArr; SendMessage &rArr; nRF_TxSendData &rArr; nRF_WriteTxBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_GetStatusRegister
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRecieveMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_EXTIcfg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRecieveMode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_EXTIcfg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_INT_Init
</UL>

<P><STRONG><a name="[c7]"></a>FIFO_GetPopIndex</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cmlib.o(i.FIFO_GetPopIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFO_GetPopIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_GetMessage
</UL>

<P><STRONG><a name="[183]"></a>FIFO_GetPushIndex</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cmlib.o(i.FIFO_GetPushIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFO_GetPushIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>FIFO_Init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, cmlib.o(i.FIFO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FIFO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Initialization
</UL>

<P><STRONG><a name="[c8]"></a>FIFO_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmlib.o(i.FIFO_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetPopIndex
</UL>

<P><STRONG><a name="[8f]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[90]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[d7]"></a>File_GetGraphInfo</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, file.o(i.File_GetGraphInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemAddr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGraph
</UL>

<P><STRONG><a name="[da]"></a>File_GetGraphSum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, file.o(i.File_GetGraphSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = File_GetGraphSum &rArr; GetResourceItemNum &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemNum
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGraph
</UL>

<P><STRONG><a name="[dc]"></a>File_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, file.o(i.File_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGraph
</UL>

<P><STRONG><a name="[dd]"></a>File_SetBaseAddr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, file.o(i.File_SetBaseAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = File_SetBaseAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[de]"></a>Flash_4K_Erase</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flash.o(i.Flash_4K_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_4K_Erase &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
</UL>

<P><STRONG><a name="[e1]"></a>Flash_4K_Erase_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, flash.o(i.Flash_4K_Erase_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_4K_Erase_Start &rArr; Flash_Write_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updategame
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setgname
</UL>

<P><STRONG><a name="[e2]"></a>Flash_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = Flash_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Initialization
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Status_Reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Reg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_Check_JEDEC_ID
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_Check_JEDEC_ID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_GPIO_SPI_Mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_GPIO_QPI_Mode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Enter_QPI_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[a4]"></a>Flash_Read</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, flash.o(i.Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Read_Param
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_R
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_Out
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_In
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemNum
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemAddr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceAddr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_SPI
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_SetBaseAddr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setgname
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgname
</UL>

<P><STRONG><a name="[e3]"></a>Flash_Read_Status_Reg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flash.o(i.Flash_Read_Status_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_Read_Status_Reg &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_R
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_Out
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_In
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[e6]"></a>Flash_Write</STRONG> (Thumb, 134 bytes, Stack size 288 bytes, flash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Flash_Write &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updategame
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setgname
</UL>

<P><STRONG><a name="[e7]"></a>Flash_Write_Page</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, flash.o(i.Flash_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Flash_Write_Page &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[e4]"></a>Flash_Write_Status_Reg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flash.o(i.Flash_Write_Status_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_Write_Status_Reg &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[a8]"></a>FrushDspBuffer</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, display.o(i.FrushDspBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FrushDspBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshGraphs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Open
</UL>

<P><STRONG><a name="[16c]"></a>FrushRectangle</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, display.o(i.FrushRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FrushRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>

<P><STRONG><a name="[e8]"></a>GD62429_GPIO_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gd62429.o(i.GD62429_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GD62429_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[e9]"></a>GD_I2C_W</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gd62429.o(i.GD_I2C_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GD_I2C_W
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_Setvolume
</UL>

<P><STRONG><a name="[4d]"></a>GEA_AddAnimation</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, hdr.o(i.GEA_AddAnimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GEA_AddAnimation
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer2index
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PlayAnimation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>GEA_ClePutRef</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, slaverapis2.o(i.GEA_ClePutRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = GEA_ClePutRef &rArr; RefreshGraphs &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshGraphs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphLayer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGraph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>GEA_ClearAnimationFifo</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hdr.o(i.GEA_ClearAnimationFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GEA_ClearAnimationFifo &rArr; hdraction &rArr; ClearGraphLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdraction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>GEA_ClearLayer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, slaverapis2.o(i.GEA_ClearLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GEA_ClearLayer &rArr; ClearGraphLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>GEA_DeleteAnimation</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hdr.o(i.GEA_DeleteAnimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GEA_DeleteAnimation &rArr; hdraction &rArr; ClearGraphLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdraction
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>GEA_GetGName</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, config.o(i.GEA_GetGName))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GEA_GetGName &rArr; getgname &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>GEA_GetJoyStickStatus</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, slaverapis2.o(i.GEA_GetJoyStickStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GEA_GetJoyStickStatus &rArr; gSensor_Box_Z_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSlaverID
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_WaveRank
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_TopSurface
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Box_Z_Angle
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Box_Y_Angle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Box_X_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>GEA_GetNearStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, recev.o(i.GEA_GetNearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GEA_GetNearStatus &rArr; ccopy
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccopy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>GEA_GetSpeechStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sentence.o(i.GEA_GetSpeechStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SlaverState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>GEA_LoopSpeech</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sentence.o(i.GEA_LoopSpeech))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GEA_LoopSpeech &rArr; playbgm &rArr; _PlayBGM &rArr; audio_checkmsg &rArr; chanel_fillbuf &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playbgm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopBGM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>GEA_MotorCtrl</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, motor.o(i.GEA_MotorCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GEA_MotorCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Off
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_On
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>GEA_PlayAnimation</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hdr.o(i.GEA_PlayAnimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GEA_PlayAnimation &rArr; hdraction &rArr; ClearGraphLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_AddAnimation
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdraction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>GEA_PlaySpeech</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sentence.o(i.GEA_PlaySpeech))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GEA_PlaySpeech &rArr; sentencePlay &rArr;  stCheck (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_StopSpeech
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sentencePlay
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>GEA_PowerOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xiaomu.o(i.GEA_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = GEA_PowerOff &rArr; slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>GEA_PutGraph</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, slaverapis2.o(i.GEA_PutGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = GEA_PutGraph &rArr; RefreshGraphs &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshGraphs
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGraph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>GEA_SetGName</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, config.o(i.GEA_SetGName))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = GEA_SetGName &rArr; setgname &rArr; Flash_Write &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setgname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>GEA_SetMode</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, slaverapis2.o(i.GEA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = GEA_SetMode &rArr; GEA_Transport &rArr; slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetupdate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_Transport
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_On
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>GEA_SetSpeechList</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sentence.o(i.GEA_SetSpeechList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GEA_SetSpeechList &rArr; GEA_StopSpeech
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_StopSpeech
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>GEA_SetTimCnt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, cmos.o(i.GEA_SetTimCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GEA_SetTimCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrAutoPowerOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>GEA_Setvolume</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, config.o(i.GEA_Setvolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GEA_Setvolume &rArr; GD_I2C_W
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD_I2C_W
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>GEA_SlaverState</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, slaverapis2.o(i.GEA_SlaverState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GEA_SlaverState
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetSpeechStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>GEA_StopAnimation</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hdr.o(i.GEA_StopAnimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GEA_StopAnimation &rArr; hdraction &rArr; ClearGraphLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdraction
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>GEA_StopSpeech</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sentence.o(i.GEA_StopSpeech))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GEA_StopSpeech
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopVoice
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PlaySpeech
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetSpeechList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genginecfg.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>GEA_Transport</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xiaomu.o(i.GEA_Transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = GEA_Transport &rArr; slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetMode
</UL>

<P><STRONG><a name="[120]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_EXTIcfg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_INT_Init
</UL>

<P><STRONG><a name="[81]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweron
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ONELINE_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD62429_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_GPIOInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Out
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_In
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_GPIO_SPI_Mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_GPIO_QPI_Mode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_Out
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_In
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init_Shutdown_Pin
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
</UL>

<P><STRONG><a name="[129]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ONELINE_Init
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetStandbyState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetChargeState
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_W
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_R
</UL>

<P><STRONG><a name="[be]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLine
</UL>

<P><STRONG><a name="[19c]"></a>G_CallFuntion</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, xiaomu.o(i.G_CallFuntion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = G_CallFuntion
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[108]"></a>GetResourceAddr</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, file.o(i.GetResourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemNum
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemAddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playbgm
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stOpenSentence
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stFillBuf
</UL>

<P><STRONG><a name="[d9]"></a>GetResourceData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, file.o(i.GetResourceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceDataP
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_GetGraphInfo
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playbgm
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stOpenSentence
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stFillBuf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chanel_fillbuf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PlayBGM
</UL>

<P><STRONG><a name="[109]"></a>GetResourceDataP</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, file.o(i.GetResourceDataP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetResourceDataP &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
</UL>

<P><STRONG><a name="[d8]"></a>GetResourceItemAddr</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, file.o(i.GetResourceItemAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceAddr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_GetGraphInfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_open
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PlayBGM
</UL>

<P><STRONG><a name="[db]"></a>GetResourceItemNum</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, file.o(i.GetResourceItemNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetResourceItemNum &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceAddr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_GetGraphSum
</UL>

<P><STRONG><a name="[166]"></a>Get_Box_XYZ</STRONG> (Thumb, 724 bytes, Stack size 20 bytes, g-sensor.o(i.Get_Box_XYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_Box_XYZ
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Update
</UL>

<P><STRONG><a name="[199]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[a0]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_SPI
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_MCU
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[197]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[198]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[196]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[111]"></a>InitConfig</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, config.o(i.InitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InitConfig &rArr; writeconfig &rArr; Flash_Write_Page &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configchecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[19f]"></a>IsVoiceBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, audio.o(i.IsVoiceBusy))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
</UL>

<P><STRONG><a name="[b7]"></a>Lcd_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(i.Lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Lcd_Init &rArr; Lcd_GPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Param
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Cmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Reset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_GPIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Initialization
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_On
</UL>

<P><STRONG><a name="[102]"></a>Lcd_Off</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd.o(i.Lcd_Off))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetMode
</UL>

<P><STRONG><a name="[103]"></a>Lcd_On</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd.o(i.Lcd_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lcd_On &rArr; Lcd_Init &rArr; Lcd_GPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetMode
</UL>

<P><STRONG><a name="[118]"></a>Lcd_RefreshScreen</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd.o(i.Lcd_RefreshScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Lcd_RefreshScreen &rArr; Lcd_Set_Window &rArr; Lcd_Write_Param
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Buf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScreen
</UL>

<P><STRONG><a name="[119]"></a>Lcd_Set_Window</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd.o(i.Lcd_Set_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lcd_Set_Window &rArr; Lcd_Write_Param
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Param
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_RefreshScreen
</UL>

<P><STRONG><a name="[11a]"></a>Lcd_Write_Buf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lcd.o(i.Lcd_Write_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lcd_Write_Buf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_RefreshScreen
</UL>

<P><STRONG><a name="[116]"></a>Lcd_Write_Cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(i.Lcd_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_Write_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_initOn
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Window
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_On
</UL>

<P><STRONG><a name="[117]"></a>Lcd_Write_Param</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(i.Lcd_Write_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_Write_Param
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Window
</UL>

<P><STRONG><a name="[b8]"></a>Lcd_initOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.Lcd_initOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lcd_initOn &rArr; Lcd_Write_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Initialization
</UL>

<P><STRONG><a name="[11d]"></a>MMA7660FC_GetShakeState</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, mma7660fc.o(i.MMA7660FC_GetShakeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MMA7660FC_GetShakeState &rArr; GetShakeRate
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShakeRate
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Update
</UL>

<P><STRONG><a name="[122]"></a>MMA7660FC_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, mma7660fc.o(i.MMA7660FC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScreen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Initialization
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_INT_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[125]"></a>MMA7660FC_Standby</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma7660fc.o(i.MMA7660FC_Standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MMA7660FC_Standby &rArr; Write_Reg &rArr; I2C_W &rArr; SDA_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[162]"></a>MMA7660FC_To_Angle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mma7660fc.o(i.MMA7660FC_To_Angle))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Box_Z_Angle
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Box_Y_Angle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Box_X_Angle
</UL>

<P><STRONG><a name="[165]"></a>MMA7660FC_XYZ</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mma7660fc.o(i.MMA7660FC_XYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MMA7660FC_XYZ
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Update
</UL>

<P><STRONG><a name="[126]"></a>Motor_Check</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, motor.o(i.Motor_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>Motor_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[f9]"></a>Motor_Off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motor.o(i.Motor_Off))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_MotorCtrl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Check
</UL>

<P><STRONG><a name="[fa]"></a>Motor_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor.o(i.Motor_On))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_MotorCtrl
</UL>

<P><STRONG><a name="[99]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_EXTIcfg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ONELINE_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_INT_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Timer2Config
</UL>

<P><STRONG><a name="[89]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Initialization
</UL>

<P><STRONG><a name="[128]"></a>ONELINE_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, oneline.o(i.ONELINE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ONELINE_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[12a]"></a>PlayVoice</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, audio.o(i.PlayVoice))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PlayVoice &rArr; audio_checkmsg &rArr; chanel_fillbuf &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemAddr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_checkmsg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_open
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
</UL>

<P><STRONG><a name="[12d]"></a>PutChar</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, display.o(i.PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PutChar &rArr; PutChar8x16
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHex
</UL>

<P><STRONG><a name="[12f]"></a>PutGraph</STRONG> (Thumb, 576 bytes, Stack size 1040 bytes, display.o(i.PutGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Read
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_GetGraphSum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_GetGraphInfo
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBtosixteen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB2Y
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVisibleRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScreen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshGraphs
</UL>

<P><STRONG><a name="[133]"></a>PutHex</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, display.o(i.PutHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PutHex &rArr; PutChar &rArr; PutChar8x16
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHexBlock
</UL>

<P><STRONG><a name="[134]"></a>PutHexBlock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, display.o(i.PutHexBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PutHexBlock &rArr; PutHex &rArr; PutChar &rArr; PutChar8x16
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHex
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>

<P><STRONG><a name="[aa]"></a>PutString</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, display.o(i.PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PutString &rArr; PutChar8x16
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Open
</UL>

<P><STRONG><a name="[70]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[b0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Timer2Config
</UL>

<P><STRONG><a name="[156]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[6f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweron
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ONELINE_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD62429_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_GPIOInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_GPIO_SPI_Mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_GPIO_QPI_Mode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init_Shutdown_Pin
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
</UL>

<P><STRONG><a name="[7a]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[8c]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[96]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[98]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[91]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[8d]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[93]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[92]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[95]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[94]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[97]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[8e]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_SetSystemClock
</UL>

<P><STRONG><a name="[130]"></a>RGB2Y</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, display.o(i.RGB2Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RGB2Y
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGraph
</UL>

<P><STRONG><a name="[132]"></a>RGBtosixteen</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, display.o(i.RGBtosixteen))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RGBtosixteen
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGraph
</UL>

<P><STRONG><a name="[b5]"></a>RefreshGraphs</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, display.o(i.RefreshGraphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = RefreshGraphs &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGraph
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrushDspBuffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_CheckUpdate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PutGraph
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_ClePutRef
</UL>

<P><STRONG><a name="[ab]"></a>RefreshScreen</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display.o(i.RefreshScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_RefreshScreen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGraph
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshGraphs
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Initialization
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[c6]"></a>ResetRecieveMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf24l01.o(i.ResetRecieveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ResetRecieveMode &rArr; nRF_RecieveMode &rArr; nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RecieveMode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ClearStatusRegister
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>Resetproisok</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, config.o(i.Resetproisok))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Resetproisok &rArr; witeproisok &rArr; writeconfig &rArr; Flash_Write_Page &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;witeproisok
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[13c]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
</UL>

<P><STRONG><a name="[13d]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
</UL>

<P><STRONG><a name="[188]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>

<P><STRONG><a name="[18a]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>

<P><STRONG><a name="[189]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>

<P><STRONG><a name="[13b]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
</UL>

<P><STRONG><a name="[13a]"></a>SPI_NRF_Init</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nrf24l01.o(i.SPI_NRF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_NRF_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearFlag
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Init
</UL>

<P><STRONG><a name="[146]"></a>SWS_BytesToRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, singlewireslave.o(i.SWS_BytesToRead))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[fe]"></a>SWS_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, singlewireslave.o(i.SWS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SWS_Init &rArr; set_mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_set_buf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetMode
</UL>

<P><STRONG><a name="[140]"></a>SWS_ReadBytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, singlewireslave.o(i.SWS_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SWS_ReadBytes &rArr; fifo_read_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[142]"></a>SWS_SendBytes</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, singlewireslave.o(i.SWS_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SWS_SendBytes &rArr; fifo_write_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[147]"></a>SWS_getBytes</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, singlewireslave.o(i.SWS_getBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SWS_getBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[14c]"></a>SendMessage</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf24l01.o(i.SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendMessage &rArr; nRF_TxSendData &rArr; nRF_WriteTxBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ClearStatusRegister
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSendData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>SetDisplayUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, display.o(i.SetDisplayUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
</UL>

<P><STRONG><a name="[f7]"></a>StopBGM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio.o(i.StopBGM))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_LoopSpeech
</UL>

<P><STRONG><a name="[106]"></a>StopVoice</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio.o(i.StopVoice))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_StopSpeech
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Check
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_TimerProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, pcm.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM3_IRQHandler &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Timer2Config
</UL>

<P><STRONG><a name="[152]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Timer2Config
</UL>

<P><STRONG><a name="[155]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
</UL>

<P><STRONG><a name="[151]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Timer2Config
</UL>

<P><STRONG><a name="[9b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Timer2Config
</UL>

<P><STRONG><a name="[14a]"></a>WriteSlaverID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, config.o(i.WriteSlaverID))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteSlaverID &rArr; writeconfig &rArr; Flash_Write_Page &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[157]"></a>_PlayBGM</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, audio.o(i._PlayBGM))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = _PlayBGM &rArr; audio_checkmsg &rArr; chanel_fillbuf &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemAddr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_checkmsg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_open
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playbgm
</UL>

<P><STRONG><a name="[1b2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[161]"></a>adpcm_decoder</STRONG> (Thumb, 214 bytes, Stack size 52 bytes, adpcm.o(i.adpcm_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = adpcm_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>

<P><STRONG><a name="[158]"></a>audio_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, audio.o(i.audio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = audio_Init &rArr; pcm_Init &rArr; pcm_Init_Shutdown_Pin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sndInit
</UL>

<P><STRONG><a name="[12b]"></a>audio_checkmsg</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, audio.o(i.audio_checkmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = audio_checkmsg &rArr; chanel_fillbuf &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_fillbuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_checkbuf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixchanel
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chanel_fillbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PlayBGM
</UL>

<P><STRONG><a name="[f6]"></a>ccopy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cmlib.o(i.ccopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ccopy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetNearStatus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recevcheck
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
</UL>

<P><STRONG><a name="[15a]"></a>chanel_fillbuf</STRONG> (Thumb, 260 bytes, Stack size 536 bytes, chanel.o(i.chanel_fillbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = chanel_fillbuf &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_checkmsg
</UL>

<P><STRONG><a name="[15f]"></a>checkpower</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, xiaomu.o(i.checkpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = checkpower &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Initialization
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimerCount
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsCharging
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsChargForSlave
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetAD
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[15e]"></a>decode</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, decode.o(i.decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = decode &rArr; adpcm_decoder
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adpcm_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chanel_fillbuf
</UL>

<P><STRONG><a name="[f2]"></a>gSensor_Box_X_Angle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, g-sensor.o(i.gSensor_Box_X_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gSensor_Box_X_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_To_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetJoyStickStatus
</UL>

<P><STRONG><a name="[f3]"></a>gSensor_Box_Y_Angle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, g-sensor.o(i.gSensor_Box_Y_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gSensor_Box_Y_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_To_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetJoyStickStatus
</UL>

<P><STRONG><a name="[f4]"></a>gSensor_Box_Z_Angle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, g-sensor.o(i.gSensor_Box_Z_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gSensor_Box_Z_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_To_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetJoyStickStatus
</UL>

<P><STRONG><a name="[163]"></a>gSensor_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, g-sensor.o(i.gSensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = gSensor_Init &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[f5]"></a>gSensor_TopSurface</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, g-sensor.o(i.gSensor_TopSurface))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetJoyStickStatus
</UL>

<P><STRONG><a name="[164]"></a>gSensor_Update</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, g-sensor.o(i.gSensor_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gSensor_Update &rArr; MMA7660FC_GetShakeState &rArr; GetShakeRate
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_XYZ
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_GetShakeState
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Box_XYZ
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[f1]"></a>gSensor_WaveRank</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, g-sensor.o(i.gSensor_WaveRank))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetJoyStickStatus
</UL>

<P><STRONG><a name="[16e]"></a>getConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config.o(i.getConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>

<P><STRONG><a name="[19e]"></a>getMotorFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(i.getMotorFlag))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[167]"></a>get_NRF_RSSI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf24l01.o(i.get_NRF_RSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_NRF_RSSI &rArr; nRF_RegisterReadByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>getgname</STRONG> (Thumb, 130 bytes, Stack size 280 bytes, config.o(i.getgname))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = getgname &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetGName
</UL>

<P><STRONG><a name="[16a]"></a>hardware_main</STRONG> (Thumb, 568 bytes, Stack size 168 bytes, hardware.o(i.hardware_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = hardware_main &rArr; slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHexBlock
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PlaySpeech
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetNearStatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetJoyStickStatus
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrushRectangle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_SPI
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_MCU
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recevcheck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Update
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScreen
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetSpeechStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_ClearLayer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initionNRF
</UL>

<P><STRONG><a name="[16f]"></a>hdr_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hdr.o(i.hdr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hdr_Init &rArr; GEA_DeleteAnimation &rArr; hdraction &rArr; ClearGraphLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_DeleteAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[170]"></a>hdr_check</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, hdr.o(i.hdr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hdr_check &rArr; GEA_PlaySpeech &rArr; sentencePlay &rArr;  stCheck (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceDataP
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayUpdate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PlaySpeech
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetSpeechStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphLayer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGraph
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer2index
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_check
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_open
</UL>

<P><STRONG><a name="[172]"></a>hdr_open</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hdr.o(i.hdr_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hdr_open &rArr; hdr_check &rArr; GEA_PlaySpeech &rArr; sentencePlay &rArr;  stCheck (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceItemAddr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_check
</UL>

<P><STRONG><a name="[ee]"></a>hdraction</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hdr.o(i.hdraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hdraction &rArr; ClearGraphLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphLayer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer2index
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_StopAnimation
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PlayAnimation
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_DeleteAnimation
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_ClearAnimationFifo
</UL>

<P><STRONG><a name="[173]"></a>initionNRF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xiaomu.o(i.initionNRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = initionNRF &rArr; hardware_main &rArr; slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_updateAddr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RecieveMode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Initialization
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_InitReg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_EXTIcfg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[c3]"></a>mDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmos.o(i.mDelay))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Initialization
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_PowerDown
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = main &rArr; slaver_main &rArr; initionNRF &rArr; hardware_main &rArr; slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[15b]"></a>mixchanel</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, mix.o(i.mixchanel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mixchanel
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_checkmsg
</UL>

<P><STRONG><a name="[179]"></a>nRF_Check</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrf24l01.o(i.nRF_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nRF_Check &rArr; nRF_RegisterWriteBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteBuffer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Initialization
</UL>

<P><STRONG><a name="[136]"></a>nRF_ClearStatusRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_ClearStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF_ClearStatusRegister &rArr; nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRecieveMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Init
</UL>

<P><STRONG><a name="[177]"></a>nRF_EXTIcfg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf24l01.o(i.nRF_EXTIcfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF_EXTIcfg &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initionNRF
</UL>

<P><STRONG><a name="[17c]"></a>nRF_FlushRxBuffer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_FlushRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nRF_FlushRxBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RecieveMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSendData
</UL>

<P><STRONG><a name="[180]"></a>nRF_FlushTxBuffer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_FlushTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nRF_FlushTxBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSendData
</UL>

<P><STRONG><a name="[181]"></a>nRF_GetMessage</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrf.o(i.nRF_GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF_GetMessage &rArr; FIFO_GetPopIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetPopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[c2]"></a>nRF_GetStatusRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_GetStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nRF_GetStatusRegister &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Init
</UL>

<P><STRONG><a name="[c4]"></a>nRF_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, xiaomu.o(i.nRF_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nRF_IRQHandler &rArr; SendMessage &rArr; nRF_TxSendData &rArr; nRF_WriteTxBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReadRxBuffer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_NRF_RSSI
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetPushIndex
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrAutoPowerOff
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphLayer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGraph
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>nRF_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nRF_Init &rArr; SPI_NRF_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ClearStatusRegister
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_StandbyMode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_PowerDown
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_GetStatusRegister
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Initialization
</UL>

<P><STRONG><a name="[176]"></a>nRF_InitReg</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_InitReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nRF_InitReg &rArr; nRF_RegisterWriteBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initionNRF
</UL>

<P><STRONG><a name="[174]"></a>nRF_Initialization</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf.o(i.nRF_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = nRF_Initialization &rArr; Console_Open &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Open
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initionNRF
</UL>

<P><STRONG><a name="[185]"></a>nRF_PowerDown</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF_PowerDown &rArr; nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Init
</UL>

<P><STRONG><a name="[182]"></a>nRF_ReadRxBuffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf24l01.o(i.nRF_ReadRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF_ReadRxBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>nRF_ReceiveDataHandler</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, xiaomu.o(i.nRF_ReceiveDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nRF_ReceiveDataHandler &rArr; nRF_RecieveMode &rArr; nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RecieveMode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReadRxBuffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ClearStatusRegister
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccopy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrAutoPowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>nRF_RecieveMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_RecieveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF_RecieveMode &rArr; nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSetRP1P2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initionNRF
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRecieveMode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSetTXRP0
</UL>

<P><STRONG><a name="[14d]"></a>nRF_RegisterWriteByte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf24l01.o(i.nRF_RegisterWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSetRP1P2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RecieveMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_InitReg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ClearStatusRegister
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_PowerDown
</UL>

<P><STRONG><a name="[18d]"></a>nRF_SetAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf.o(i.nRF_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_updateAddr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_setAddr
</UL>

<P><STRONG><a name="[186]"></a>nRF_StandbyMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf24l01.o(i.nRF_StandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Init
</UL>

<P><STRONG><a name="[14e]"></a>nRF_TxSendData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf24l01.o(i.nRF_TxSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nRF_TxSendData &rArr; nRF_WriteTxBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_WriteTxBuffer
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushTxBuffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>

<P><STRONG><a name="[14b]"></a>nRF_TxSetRP1P2</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_TxSetRP1P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nRF_TxSetRP1P2 &rArr; nRF_RecieveMode &rArr; nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RecieveMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[18c]"></a>nRF_TxSetTXRP0</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_TxSetTXRP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nRF_TxSetTXRP0 &rArr; nRF_RecieveMode &rArr; nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RecieveMode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_updateAddr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_setAddr
</UL>

<P><STRONG><a name="[18b]"></a>nRF_WriteTxBuffer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf24l01.o(i.nRF_WriteTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF_WriteTxBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSendData
</UL>

<P><STRONG><a name="[148]"></a>nRF_getAddr</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, config.o(i.nRF_getAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nRF_getAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_updateAddr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_setAddr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[149]"></a>nRF_setAddr</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, config.o(i.nRF_setAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nRF_setAddr &rArr; writeconfig &rArr; Flash_Write_Page &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_getAddr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSetTXRP0
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>

<P><STRONG><a name="[175]"></a>nRF_updateAddr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, config.o(i.nRF_updateAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nRF_updateAddr &rArr; nRF_TxSetTXRP0 &rArr; nRF_RecieveMode &rArr; nRF_RegisterWriteByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_getAddr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSetTXRP0
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initionNRF
</UL>

<P><STRONG><a name="[159]"></a>pcm_Init</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, pcm.o(i.pcm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pcm_Init &rArr; pcm_Init_Shutdown_Pin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init_Shutdown_Pin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_Init
</UL>

<P><STRONG><a name="[15d]"></a>pcm_checkbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pcm.o(i.pcm_checkbuf))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_checkmsg
</UL>

<P><STRONG><a name="[154]"></a>pcm_close</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pcm.o(i.pcm_close))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>pcm_fillbuf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pcm.o(i.pcm_fillbuf))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_checkmsg
</UL>

<P><STRONG><a name="[12c]"></a>pcm_open</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, pcm.o(i.pcm_open))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PlayBGM
</UL>

<P><STRONG><a name="[18f]"></a>play_check</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, hdr.o(i.play_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = play_check &rArr; hdr_open &rArr; hdr_check &rArr; GEA_PlaySpeech &rArr; sentencePlay &rArr;  stCheck (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccopy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[105]"></a>play_status</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hdr.o(i.play_status))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SlaverState
</UL>

<P><STRONG><a name="[f8]"></a>playbgm</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, audio.o(i.playbgm))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = playbgm &rArr; _PlayBGM &rArr; audio_checkmsg &rArr; chanel_fillbuf &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceAddr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PlayBGM
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_LoopSpeech
</UL>

<P><STRONG><a name="[195]"></a>poweroff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mma7660fc.o(i.poweroff))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[190]"></a>poweron</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mma7660fc.o(i.poweron))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = poweron &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[f0]"></a>readSlaverID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(i.readSlaverID))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetJoyStickStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[191]"></a>recev_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, recev.o(i.recev_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = recev_Init &rArr; getsample &rArr; DMA_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsample
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[16d]"></a>recevcheck</STRONG> (Thumb, 1182 bytes, Stack size 128 bytes, recev.o(i.recevcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = recevcheck &rArr; getsample &rArr; DMA_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccopy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsample
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[ff]"></a>resetupdate</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, xiaomu.o(i.resetupdate))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateend
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetMode
</UL>

<P><STRONG><a name="[187]"></a>setLine</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oneline.o(i.setLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setLine
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
</UL>

<P><STRONG><a name="[fd]"></a>setgname</STRONG> (Thumb, 152 bytes, Stack size 280 bytes, config.o(i.setgname))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = setgname &rArr; Flash_Write &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetGName
</UL>

<P><STRONG><a name="[160]"></a>shutdown</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, xiaomu.o(i.shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweroff
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Standby
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaverpowerOff
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
</UL>

<P><STRONG><a name="[178]"></a>slaver_main</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, xiaomu.o(i.slaver_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = slaver_main &rArr; initionNRF &rArr; hardware_main &rArr; slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sndInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recevcheck
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recev_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSlaverID
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweron
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_check
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_GetMessage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorFlag
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Update
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScreen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshGraphs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_MotorCtrl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_GetSpeechStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_AddAnimation
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD62429_GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_SetBaseAddr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Initialization
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_CheckUpdate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGMCU_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Open
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAutoPowerOff
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Initialization
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimerCount
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_IsChargForSlave
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_GetAD
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updategame
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initionNRF
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpower
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CallFuntion
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PowerOff
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>slaverpowerOff</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, xiaomu.o(i.slaverpowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = slaverpowerOff &rArr; shutdown &rArr; MMA7660FC_Init &rArr; Display_Initialization &rArr; RefreshScreen &rArr; PutGraph &rArr; File_GetGraphInfo &rArr; GetResourceItemAddr &rArr; GetResourceAddr &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSlaverID
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_status
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_check
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Off
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_StopSpeech
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_StopAnimation
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_ClearLayer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_AddAnimation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_CheckUpdate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_Transport
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PowerOff
</UL>

<P><STRONG><a name="[19b]"></a>sndInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, sentence.o(i.sndInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sndInit &rArr; audio_Init &rArr; pcm_Init &rArr; pcm_Init_Shutdown_Pin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[135]"></a>stCheck</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, sentence.o(i.stCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + In Cycle
<LI>Call Chain = stCheck &rArr;  stCheck (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_checkmsg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceBusy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stOpenSentence
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stFillBuf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sentencePlay
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshGraphs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sentencePlay
</UL>

<P><STRONG><a name="[bf]"></a>uDelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cmos.o(i.uDelay))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReceiveDataHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>updateend</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xiaomu.o(i.updateend))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = updateend &rArr; updategame &rArr; Flash_Write &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_SetBaseAddr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updategame
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetupdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_SetMode
</UL>

<P><STRONG><a name="[19d]"></a>updategame</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, xiaomu.o(i.updategame))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = updategame &rArr; Flash_Write &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[113]"></a>writeconfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, config.o(i.writeconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = writeconfig &rArr; Flash_Write_Page &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Page
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configchecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_setAddr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSlaverID
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;witeproisok
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[144]"></a>SW_Check</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, xiaomu.o(i.SW_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SW_Check &rArr; nRF_setAddr &rArr; writeconfig &rArr; Flash_Write_Page &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSlaverID
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_setAddr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_getAddr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSetRP1P2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSlaverID
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_getBytes
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_SendBytes
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_ReadBytes
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_BytesToRead
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resetproisok
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ONELINE_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_GetTimer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaver_main
</UL>

<P><STRONG><a name="[131]"></a>GetVisibleRegion</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, display.o(i.GetVisibleRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetVisibleRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGraph
</UL>

<P><STRONG><a name="[12e]"></a>PutChar8x16</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, display.o(i.PutChar8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PutChar8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
</UL>

<P><STRONG><a name="[112]"></a>configchecksum</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, config.o(i.configchecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = configchecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConfig
</UL>

<P><STRONG><a name="[139]"></a>witeproisok</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, config.o(i.witeproisok))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = witeproisok &rArr; writeconfig &rArr; Flash_Write_Page &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resetproisok
</UL>

<P><STRONG><a name="[eb]"></a>layer2index</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hdr.o(i.layer2index))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_AddAnimation
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdraction
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_check
</UL>

<P><STRONG><a name="[17b]"></a>nRF_RegisterReadBuffer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf24l01.o(i.nRF_RegisterReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF_RegisterReadBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Check
</UL>

<P><STRONG><a name="[168]"></a>nRF_RegisterReadByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf24l01.o(i.nRF_RegisterReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF_RegisterReadByte &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_NRF_RSSI
</UL>

<P><STRONG><a name="[17a]"></a>nRF_RegisterWriteBuffer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf24l01.o(i.nRF_RegisterWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF_RegisterWriteBuffer &rArr; nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_SPIRW
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSetRP1P2
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_InitReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_TxSetTXRP0
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_Check
</UL>

<P><STRONG><a name="[17e]"></a>nRF_SPIRW</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf24l01.o(i.nRF_SPIRW))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nRF_SPIRW
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReadRxBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_WriteTxBuffer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_GetStatusRegister
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushTxBuffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushRxBuffer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteBuffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterReadByte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterReadBuffer
</UL>

<P><STRONG><a name="[17d]"></a>nRF_SPIStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf24l01.o(i.nRF_SPIStart))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReadRxBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_WriteTxBuffer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_GetStatusRegister
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushTxBuffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushRxBuffer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteBuffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterReadByte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterReadBuffer
</UL>

<P><STRONG><a name="[17f]"></a>nRF_SPIStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf24l01.o(i.nRF_SPIStop))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_ReadRxBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_WriteTxBuffer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_GetStatusRegister
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushTxBuffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_FlushRxBuffer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterWriteBuffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterReadByte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF_RegisterReadBuffer
</UL>

<P><STRONG><a name="[11b]"></a>DB_Write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(i.DB_Write))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Param
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Buf
</UL>

<P><STRONG><a name="[114]"></a>Lcd_GPIOInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd.o(i.Lcd_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lcd_GPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[115]"></a>Lcd_Reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.Lcd_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[ca]"></a>F_DB_In</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, flash.o(i.F_DB_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = F_DB_In &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_Check_JEDEC_ID
</UL>

<P><STRONG><a name="[cb]"></a>F_DB_Out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, flash.o(i.F_DB_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_Check_JEDEC_ID
</UL>

<P><STRONG><a name="[cc]"></a>F_Enter_QPI_Mode</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, flash.o(i.F_Enter_QPI_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = F_Enter_QPI_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_W
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_R
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[d1]"></a>F_GPIO_QPI_Mode</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, flash.o(i.F_GPIO_QPI_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = F_GPIO_QPI_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[d2]"></a>F_GPIO_SPI_Mode</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, flash.o(i.F_GPIO_SPI_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = F_GPIO_SPI_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[d3]"></a>F_QPI_Check_JEDEC_ID</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flash.o(i.F_QPI_Check_JEDEC_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = F_QPI_Check_JEDEC_ID &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_R
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_Out
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_In
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[d5]"></a>F_QPI_R</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, flash.o(i.F_QPI_R))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_Check_JEDEC_ID
</UL>

<P><STRONG><a name="[d4]"></a>F_QPI_W</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, flash.o(i.F_QPI_W))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Page
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Status_Reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Reg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Read_Param
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_Check_JEDEC_ID
</UL>

<P><STRONG><a name="[d6]"></a>F_SPI_Check_JEDEC_ID</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flash.o(i.F_SPI_Check_JEDEC_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = F_SPI_Check_JEDEC_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_W
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_R
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[cf]"></a>F_SPI_R</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.F_SPI_R))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_Check_JEDEC_ID
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Enter_QPI_Mode
</UL>

<P><STRONG><a name="[ce]"></a>F_SPI_W</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, flash.o(i.F_SPI_W))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_Check_JEDEC_ID
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Enter_QPI_Mode
</UL>

<P><STRONG><a name="[cd]"></a>F_WR_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.F_WR_Start))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Page
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Status_Reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Reg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Read_Param
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_Check_JEDEC_ID
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_Check_JEDEC_ID
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Enter_QPI_Mode
</UL>

<P><STRONG><a name="[d0]"></a>F_WR_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.F_WR_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Page
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Status_Reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Reg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Done
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Read_Param
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_SPI_Check_JEDEC_ID
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_Check_JEDEC_ID
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Enter_QPI_Mode
</UL>

<P><STRONG><a name="[e5]"></a>Flash_Set_Read_Param</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, flash.o(i.Flash_Set_Read_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_Set_Read_Param
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>

<P><STRONG><a name="[e0]"></a>Flash_Wait_Done</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flash.o(i.Flash_Wait_Done))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_R
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_Out
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DB_In
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Page
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Status_Reg
</UL>

<P><STRONG><a name="[df]"></a>Flash_Write_Enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(i.Flash_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Write_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_WR_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_QPI_W
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Page
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_4K_Erase
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Status_Reg
</UL>

<P><STRONG><a name="[10c]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mma7660fc.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_W
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_R
</UL>

<P><STRONG><a name="[11e]"></a>GetShakeRate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mma7660fc.o(i.GetShakeRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetShakeRate
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_GetShakeState
</UL>

<P><STRONG><a name="[10a]"></a>I2C_R</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mma7660fc.o(i.I2C_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_R &rArr; SDA_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Out
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_In
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg_Queue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>

<P><STRONG><a name="[10e]"></a>I2C_Start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mma7660fc.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg_Queue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>

<P><STRONG><a name="[10f]"></a>I2C_Stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mma7660fc.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg_Queue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>

<P><STRONG><a name="[110]"></a>I2C_W</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mma7660fc.o(i.I2C_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_W &rArr; SDA_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Out
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_In
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg_Queue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>

<P><STRONG><a name="[11c]"></a>MMA7660FC_GPIO_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mma7660fc.o(i.MMA7660FC_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MMA7660FC_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
</UL>

<P><STRONG><a name="[11f]"></a>MMA7660FC_INT_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mma7660fc.o(i.MMA7660FC_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MMA7660FC_INT_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
</UL>

<P><STRONG><a name="[124]"></a>Read_Reg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mma7660fc.o(i.Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read_Reg &rArr; I2C_W &rArr; SDA_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_W
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_R
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Standby
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
</UL>

<P><STRONG><a name="[ba]"></a>Read_Reg_Queue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mma7660fc.o(i.Read_Reg_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_Reg_Queue &rArr; I2C_W &rArr; SDA_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_W
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_R
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>SDA_In</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mma7660fc.o(i.SDA_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_In &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_W
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_R
</UL>

<P><STRONG><a name="[10d]"></a>SDA_Out</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mma7660fc.o(i.SDA_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_W
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_R
</UL>

<P><STRONG><a name="[123]"></a>Write_Reg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mma7660fc.o(i.Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Write_Reg &rArr; I2C_W &rArr; SDA_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_W
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Standby
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660FC_Init
</UL>

<P><STRONG><a name="[fb]"></a>sentencePlay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sentence.o(i.sentencePlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = sentencePlay &rArr;  stCheck (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stOpenSentence
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GEA_PlaySpeech
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
</UL>

<P><STRONG><a name="[1a0]"></a>stFillBuf</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sentence.o(i.stFillBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stFillBuf &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
</UL>

<P><STRONG><a name="[193]"></a>stOpenSentence</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sentence.o(i.stOpenSentence))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stOpenSentence &rArr; GetResourceData &rArr; File_Read &rArr; Flash_Read &rArr; Flash_Wait_Done &rArr; F_DB_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stCheck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sentencePlay
</UL>

<P><STRONG><a name="[141]"></a>fifo_read_buf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, singlewireslave.o(i.fifo_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_read_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_ReadBytes
</UL>

<P><STRONG><a name="[c1]"></a>fifo_read_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, singlewireslave.o(i.fifo_read_byte))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_SendBytes
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buf
</UL>

<P><STRONG><a name="[13f]"></a>fifo_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, singlewireslave.o(i.fifo_reset))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
</UL>

<P><STRONG><a name="[13e]"></a>fifo_set_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, singlewireslave.o(i.fifo_set_buf))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
</UL>

<P><STRONG><a name="[143]"></a>fifo_write_buf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, singlewireslave.o(i.fifo_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_write_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_SendBytes
</UL>

<P><STRONG><a name="[c0]"></a>fifo_write_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, singlewireslave.o(i.fifo_write_byte))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buf
</UL>

<P><STRONG><a name="[bc]"></a>set_mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, singlewireslave.o(i.set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWS_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>ADC1_Configuration</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, recev.o(i.ADC1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC1_Configuration &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsample
</UL>

<P><STRONG><a name="[af]"></a>DMA_Configuration</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, recev.o(i.DMA_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsample
</UL>

<P><STRONG><a name="[107]"></a>GPIO_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, recev.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recev_Init
</UL>

<P><STRONG><a name="[ae]"></a>getsample</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, recev.o(i.getsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getsample &rArr; DMA_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recevcheck
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recev_Init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>sort</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, recev.o(i.sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sort
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recevcheck
</UL>

<P><STRONG><a name="[ea]"></a>i2c_Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd62429.o(i.i2c_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD_I2C_W
</UL>

<P><STRONG><a name="[14f]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[150]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[8a]"></a>CMOS_InitReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmos.o(i.CMOS_InitReg))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Initialization
</UL>

<P><STRONG><a name="[88]"></a>CMOS_SetSystemClock</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cmos.o(i.CMOS_SetSystemClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMOS_SetSystemClock &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Initialization
</UL>

<P><STRONG><a name="[8b]"></a>CMOS_Timer2Config</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cmos.o(i.CMOS_Timer2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMOS_Timer2Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOS_Initialization
</UL>

<P><STRONG><a name="[18e]"></a>pcm_Init_Shutdown_Pin</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pcm.o(i.pcm_Init_Shutdown_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pcm_Init_Shutdown_Pin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
